import express from "express";
import cors from "cors";
import User from "./mongodb/models/register.js";
import connectDB from "./mongodb/connection.js";
import * as dotenv from "dotenv";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import bodyParser from "body-parser";
import Property from "./mongodb/models/properties.js";
import PurchasedProperty from "./mongodb/models/propertyPurchase.js";
import KycModel from "./mongodb/models/kyc.js"
import registerPropertyModel from "./mongodb/models/registerProperty.js";

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

const jwt_secret = 'thisismysecret'

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.text());

app.use("/api/register", async (req, res) => {
  try {
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(req.body.password, saltRounds);

    const user = await User.create({
      name: req.body.name,
      email: req.body.email,
      role: req.body.role,
      password: hashedPassword,
    });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "30d",
    });

    res.status(200).json({ success: true, data: { user, token } });
  } catch (error) {
    res.status(500).json({ success: false, message: error });
  }
});


app.post('/kyc', (req,res) => {
    KycModel.create(req.body)
    .then (Kycs => res.json(Kycs))
    .catch(err => res.json(err))
} 
);


app.post('/propertyRegister', (req,res) => {
  console.log(req.body)
  registerPropertyModel.create(req.body)
  .then (registerProperties => res.json(registerProperties))
  .catch(err => res.json(err))
} 
);

app.get("/api/getProperty/:id", async (req, res) => {
  try {
    // Find the property by its ID
    const property = await registerPropertyModel.findById(req.params.id);

    // If the property is not found, return a 404 status
    if (!property) {
      return res.status(404).json({ error: "Property not found" });
    }

    // If the property is found, return it
    res.json(property);
  } catch (error) {
    // If there's an error, return a 500 status and the error message
    res.status(500).json({ error: error.message });
  }
});





app.post('/api/sampledata', async (req, res) => {
  await registerPropertyModel.insertMany(islamabadData);
  return
})

app.get('/api/getPropertyRegister', async (req, res) => {
  try {
    // Fetch data from the registerPropertiesModel
    const properties = await registerPropertyModel.find();

    // Send the fetched data as response
    res.json(properties);
  } catch (error) {
    console.error("Error fetching properties:", error);
    res.status(500).json({ message: "Internal server error" });
  }

})




app.use("/api/login", async (req, res) => {
  const {email, password } = req.body
  try {
    //checking if the user exists in database or not
    let user = await User.findOne({ email });
    if (!user) {
        return res.status(422).json({ errors: [{ msg: 'Invalid Credentials' }] });
    }

    // comparing the password entered by the user with the hashed password in database
    // bcrypt.compare() is a method which will return true if the password entered by the user is same as the hashed password in database
    if (!await bcrypt.compare(password, user.password)) {
        return res.status(422).json({ errors: [{ msg: 'Invalid Credentials' }] });
    }


    //finally if the user exists and the password is correct then we will send a session/token/jwt token to the user
    const data = user._id

    //this token will be sent to the user and will be used to authenticate the user
    //jwt.sign() is taking userData which is in this case ID of user generated by mongoDB and a secret password
    const authToken = data

    res.send({ authToken });
  } catch (error) {
    console.log(error);
    res.status(500).send("Internal Server Error");

}
});


app.use("/api/users", async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json({ success: true, data: users });
  } catch (error) {
    res.status(500).json({ success: false, message: error });
  }
});

app.use("/api/user/:id", async (req, res) => {
  const userId = req.params.id;

  try {
    // Assuming you have a function getUserById to fetch user data by ID
    const user = await User.findById(userId);
    
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    // Return the user data
    res.status(200).json({ user });
  } catch (error) {
    console.error("Error fetching user:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});




app.use('/api/properties', async (req, res) => {
  try {
    const { title, description, location, price, area, imageUrl } = req.body;
    console.log(title)
    const property = new Property({
      title,
      description,
      location,
      price,
      area,
      imageUrl
    });
    const savedProperty = await property.save();
    res.json(savedProperty);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Server error' });
  }
});

// API endpoint to get all properties
// in dropdown, get data from this api http://localhost:5000/api/getproperties
app.use('/api/getproperties', async (req, res) => {
  try {
    const properties = await Property.find();
    res.json(properties);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Server error' });
  }
});

app.use('/api/purchased-properties', async (req, res) => {
  try {
    const { propertyId, buyerId, purchaseDate } = req.body;

    // Validate propertyId and buyerId here if needed
    
    const purchasedProperty = new PurchasedProperty({
      property: propertyId,
      buyer: buyerId,
      purchaseDate: new Date(purchaseDate)
    });
    
    const savedPurchasedProperty = await purchasedProperty.save();
    
    res.json(savedPurchasedProperty);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Server error' });
  }
});

















app.use("/", (req, res) => {
  res.send("Hello this is the backend");
});

const startServer = async () => {
  try {
    connectDB(`mongodb://127.0.0.1:27017`);
    app.listen(5000, () => {
      console.log("Server is listening on port 5000");
    });
  } catch (error) {
    console.error(error);
  }





};

startServer();
